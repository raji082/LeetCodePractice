class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        HashMap<Integer, List<Integer>> adj = new HashMap<Integer, List<Integer>>();
        int indegree[] = new int[numCourses];
        int topologicalOrder[] = new int[numCourses];
        
        for(int i=0; i< prerequisites.length ;i++)
        {
            int src = prerequisites[i][1];
            int dest = prerequisites[i][0];
            indegree[dest] ++;
            List<Integer> list = adj.getOrDefault(src, new ArrayList());
            list.add(dest);
            adj.put(src, list);
        }
        Stack<Integer> stack = new Stack<Integer>();
        for(int i=0; i<indegree.length; i++)
        {
            if(indegree[i]== 0)
                stack.push(i);
        }
        int n=0;
        while(!stack.isEmpty())
        {
            int temp = stack.pop();
            topologicalOrder[n++] = temp;
            if(adj.containsKey(temp))
            {
                for(int neighbour : adj.get(temp))
                {
                    indegree[neighbour]--;
                    if(indegree[neighbour] == 0)
                        stack.push(neighbour);
                }
            }
        }
        if(n== numCourses)
            return topologicalOrder;
        return new int[0];
        
    }
}
