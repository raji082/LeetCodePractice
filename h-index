//Bruteforce -O(n2)

class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations);
        int max = -10;
        int len = citations.length;
        int possible ;
        int last;
        int first,second;
        if((citations.length == 1 && citations[0]==0) || citations.length == 0)
            return 0;
        if(citations.length == 1)
            return 1;
        int index= 0;
        for(int i=0;i<=citations.length; i++)
        {
            possible =index;
            last = len - possible;
            first = 0;
            second =0;
            for(int j=0 ;j <citations.length; j++)
            {
                if(citations[j] >= possible)
                    second++;
                else if(citations[j] < possible)
                    first++;
            }
            if(second >= possible && first <= last)
                max = Integer.max(max,possible);
            index++;
        }
        return max;
    }
}
O(nlogn)
Linear Search
=============
class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations);
        int n= citations.length;
        for(int i=citations.length-1;i>=0 ;i--)
        {
            if(citations[i] < n-i)
               return n-1-i;
        }
        return n;
    }
}

Binary search
=============
class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations);
        int l =0;
        int n = citations.length;
        int r= citations.length-1;
        int mid;
        while(l<=r)
        {
            mid = l + (r-l)/2;
            if(citations[mid]< n-mid)
                l= mid+1;
            else
                r = mid-1;
        }
        return n-l;
    }
}
